// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/caos/zitadel/internal/eventstore (interfaces: Eventstore)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	models "github.com/caos/zitadel/internal/eventstore/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEventstore is a mock of Eventstore interface
type MockEventstore struct {
	ctrl     *gomock.Controller
	recorder *MockEventstoreMockRecorder
}

// MockEventstoreMockRecorder is the mock recorder for MockEventstore
type MockEventstoreMockRecorder struct {
	mock *MockEventstore
}

// NewMockEventstore creates a new mock instance
func NewMockEventstore(ctrl *gomock.Controller) *MockEventstore {
	mock := &MockEventstore{ctrl: ctrl}
	mock.recorder = &MockEventstoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventstore) EXPECT() *MockEventstoreMockRecorder {
	return m.recorder
}

// AggregateCreator mocks base method
func (m *MockEventstore) AggregateCreator() *models.AggregateCreator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateCreator")
	ret0, _ := ret[0].(*models.AggregateCreator)
	return ret0
}

// AggregateCreator indicates an expected call of AggregateCreator
func (mr *MockEventstoreMockRecorder) AggregateCreator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateCreator", reflect.TypeOf((*MockEventstore)(nil).AggregateCreator))
}

// FilterEvents mocks base method
func (m *MockEventstore) FilterEvents(arg0 context.Context, arg1 *models.SearchQuery) ([]*models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterEvents", arg0, arg1)
	ret0, _ := ret[0].([]*models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterEvents indicates an expected call of FilterEvents
func (mr *MockEventstoreMockRecorder) FilterEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterEvents", reflect.TypeOf((*MockEventstore)(nil).FilterEvents), arg0, arg1)
}

// Health mocks base method
func (m *MockEventstore) Health(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Health indicates an expected call of Health
func (mr *MockEventstoreMockRecorder) Health(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockEventstore)(nil).Health), arg0)
}

// PushAggregateStructs mocks base method
func (m *MockEventstore) PushAggregateStructs(arg0 context.Context, arg1 []models.AggregateStruct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushAggregateStructs", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushAggregateStructs indicates an expected call of PushAggregateStructs
func (mr *MockEventstoreMockRecorder) PushAggregateStructs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushAggregateStructs", reflect.TypeOf((*MockEventstore)(nil).PushAggregateStructs), arg0, arg1)
}

// PushAggregates mocks base method
func (m *MockEventstore) PushAggregates(arg0 context.Context, arg1 ...*models.Aggregate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PushAggregates", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushAggregates indicates an expected call of PushAggregates
func (mr *MockEventstoreMockRecorder) PushAggregates(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushAggregates", reflect.TypeOf((*MockEventstore)(nil).PushAggregates), varargs...)
}
